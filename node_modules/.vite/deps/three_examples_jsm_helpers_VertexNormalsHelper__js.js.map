{
  "version": 3,
  "sources": ["../../three/examples/jsm/helpers/VertexNormalsHelper.js"],
  "sourcesContent": ["import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tLineSegments,\n\tLineBasicMaterial,\n\tMatrix3,\n\tVector3\n} from 'three';\n\nconst _v1 = new Vector3();\nconst _v2 = new Vector3();\nconst _normalMatrix = new Matrix3();\n\n/**\n * Visualizes an object's vertex normals.\n *\n * Requires that normals have been specified in the geometry as a buffer attribute or\n * have been calculated using {@link BufferGeometry#computeVertexNormals}.\n * ```js\n * const geometry = new THREE.BoxGeometry( 10, 10, 10, 2, 2, 2 );\n * const material = new THREE.MeshStandardMaterial();\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n *\n * const helper = new VertexNormalsHelper( mesh, 1, 0xff0000 );\n * scene.add( helper );\n * ```\n *\n * @augments LineSegments\n * @three_import import { VertexNormalsHelper } from 'three/addons/helpers/VertexNormalsHelper.js';\n */\nclass VertexNormalsHelper extends LineSegments {\n\n\t/**\n\t * Constructs a new vertex normals helper.\n\t *\n\t * @param {Object3D} object - The object for which to visualize vertex normals.\n\t * @param {number} [size=1] - The helper's size.\n\t * @param {number|Color|string} [color=0xff0000] - The helper's color.\n\t */\n\tconstructor( object, size = 1, color = 0xff0000 ) {\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst nNormals = object.geometry.attributes.normal.count;\n\t\tconst positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\n\n\t\tgeometry.setAttribute( 'position', positions );\n\n\t\tsuper( geometry, new LineBasicMaterial( { color, toneMapped: false } ) );\n\n\t\t/**\n\t\t * The object for which to visualize vertex normals.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */\n\t\tthis.object = object;\n\n\t\t/**\n\t\t * The helper's size.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.size = size;\n\n\t\tthis.type = 'VertexNormalsHelper';\n\n\t\t/**\n\t\t * Overwritten and set to `false` since the object's world transformation\n\t\t * is encoded in the helper's geometry data.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.matrixAutoUpdate = false;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isVertexNormalsHelper = true;\n\n\t\tthis.update();\n\n\t}\n\n\t/**\n\t * Updates the vertex normals preview based on the object's world transform.\n\t */\n\tupdate() {\n\n\t\tthis.object.updateMatrixWorld( true );\n\n\t\t_normalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\tconst matrixWorld = this.object.matrixWorld;\n\n\t\tconst position = this.geometry.attributes.position;\n\n\t\t//\n\n\t\tconst objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry ) {\n\n\t\t\tconst objPos = objGeometry.attributes.position;\n\n\t\t\tconst objNorm = objGeometry.attributes.normal;\n\n\t\t\tlet idx = 0;\n\n\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\n\t\t\tfor ( let j = 0, jl = objPos.count; j < jl; j ++ ) {\n\n\t\t\t\t_v1.fromBufferAttribute( objPos, j ).applyMatrix4( matrixWorld );\n\n\t\t\t\t_v2.fromBufferAttribute( objNorm, j );\n\n\t\t\t\t_v2.applyMatrix3( _normalMatrix ).normalize().multiplyScalar( this.size ).add( _v1 );\n\n\t\t\t\tposition.setXYZ( idx, _v1.x, _v1.y, _v1.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t\tposition.setXYZ( idx, _v2.x, _v2.y, _v2.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tposition.needsUpdate = true;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nexport { VertexNormalsHelper };\n"],
  "mappings": ";;;;;;;;;;AASA,IAAM,MAAM,IAAI,QAAQ;AACxB,IAAM,MAAM,IAAI,QAAQ;AACxB,IAAM,gBAAgB,IAAI,QAAQ;AAoBlC,IAAM,sBAAN,cAAkC,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAS9C,YAAa,QAAQ,OAAO,GAAG,QAAQ,UAAW;AAEjD,UAAM,WAAW,IAAI,eAAe;AAEpC,UAAM,WAAW,OAAO,SAAS,WAAW,OAAO;AACnD,UAAM,YAAY,IAAI,uBAAwB,WAAW,IAAI,GAAG,CAAE;AAElE,aAAS,aAAc,YAAY,SAAU;AAE7C,UAAO,UAAU,IAAI,kBAAmB,EAAE,OAAO,YAAY,MAAM,CAAE,CAAE;AAOvE,SAAK,SAAS;AAQd,SAAK,OAAO;AAEZ,SAAK,OAAO;AASZ,SAAK,mBAAmB;AASxB,SAAK,wBAAwB;AAE7B,SAAK,OAAO;AAAA,EAEb;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS;AAER,SAAK,OAAO,kBAAmB,IAAK;AAEpC,kBAAc,gBAAiB,KAAK,OAAO,WAAY;AAEvD,UAAM,cAAc,KAAK,OAAO;AAEhC,UAAM,WAAW,KAAK,SAAS,WAAW;AAI1C,UAAM,cAAc,KAAK,OAAO;AAEhC,QAAK,aAAc;AAElB,YAAM,SAAS,YAAY,WAAW;AAEtC,YAAM,UAAU,YAAY,WAAW;AAEvC,UAAI,MAAM;AAIV,eAAU,IAAI,GAAG,KAAK,OAAO,OAAO,IAAI,IAAI,KAAO;AAElD,YAAI,oBAAqB,QAAQ,CAAE,EAAE,aAAc,WAAY;AAE/D,YAAI,oBAAqB,SAAS,CAAE;AAEpC,YAAI,aAAc,aAAc,EAAE,UAAU,EAAE,eAAgB,KAAK,IAAK,EAAE,IAAK,GAAI;AAEnF,iBAAS,OAAQ,KAAK,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AAE1C,cAAM,MAAM;AAEZ,iBAAS,OAAQ,KAAK,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;AAE1C,cAAM,MAAM;AAAA,MAEb;AAAA,IAED;AAEA,aAAS,cAAc;AAAA,EAExB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAU;AAET,SAAK,SAAS,QAAQ;AACtB,SAAK,SAAS,QAAQ;AAAA,EAEvB;AAED;",
  "names": []
}
